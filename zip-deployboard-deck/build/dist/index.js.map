{"version":3,"file":"index.js","sources":["../../node_modules/classnames/index.js","../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-bootstrap/esm/ThemeProvider.js","../../node_modules/@restart/ui/esm/Button.js","../../node_modules/react-bootstrap/esm/Button.js","../../src/snapshots/SnapshotsTable.tsx","../../src/snapshots/Snapshots.tsx","../../src/snapshots/SnapshotsDataSource.ts"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/** @license React v16.14.0\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport const DEFAULT_MIN_BREAKPOINT = 'xs';\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {},\n  breakpoints: DEFAULT_BREAKPOINTS,\n  minBreakpoint: DEFAULT_MIN_BREAKPOINT\n});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\n\nfunction ThemeProvider({\n  prefixes = {},\n  breakpoints = DEFAULT_BREAKPOINTS,\n  minBreakpoint = DEFAULT_MIN_BREAKPOINT,\n  dir,\n  children\n}) {\n  const contextValue = useMemo(() => ({\n    prefixes: { ...prefixes\n    },\n    breakpoints,\n    minBreakpoint,\n    dir\n  }), [prefixes, breakpoints, minBreakpoint, dir]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const {\n    prefixes\n  } = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useBootstrapBreakpoints() {\n  const {\n    breakpoints\n  } = useContext(ThemeContext);\n  return breakpoints;\n}\nexport function useBootstrapMinBreakpoint() {\n  const {\n    minBreakpoint\n  } = useContext(ThemeContext);\n  return minBreakpoint;\n}\nexport function useIsRTL() {\n  const {\n    dir\n  } = useContext(ThemeContext);\n  return dir === 'rtl';\n}\n\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\n\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({ ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, { ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\n\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n\n    if (disabled) {\n      href = undefined;\n    }\n  }\n\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...buttonProps,\n    ...props,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport { SortToggle, timestamp } from '@spinnaker/core';\nimport type { SnapshotType } from './SnapshotsDataSource';\n\nexport interface SnapshotsTableProps {\n  commits: SnapshotType[];\n  currentSort: string;\n  toggleSort: (column: string) => void;\n  toggleDeploy: (sha: string) => void;\n}\n\nexport const SnapshotsTable = ({ commits, currentSort, toggleSort }: SnapshotsTableProps) => (\n  <table className=\"table table-hover\">\n    <thead>\n      <tr>\n        <th style={{ width: '15%' }}>Deployed</th>\n        <th style={{ width: '15%' }}>\n          <SortToggle currentSort={currentSort} onChange={toggleSort} label=\"Author\" sortKey=\"author\" />\n        </th>\n        <th style={{ width: '15%' }}>Message</th>\n        <th style={{ width: '15%' }}>Sha</th>\n        <th style={{ width: '15%' }}>\n          <SortToggle currentSort={currentSort} onChange={toggleSort} label=\"Timestamp\" sortKey=\"timestamp\" />\n        </th>\n        <th style={{ width: '15%' }}>Actions</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {commits.map((commit) => {\n        return (\n          <tr className=\"clickable\">\n            <td>{commit.currentlyDeployed}</td>\n            <td>{commit.author}</td>\n            <td>{commit.message}</td>\n            <td>{commit.sha}</td>\n            <td>{commit.timestamp}</td>\n            <td>\n              <Button>Deploy</Button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { useCurrentStateAndParams, useRouter } from '@uirouter/react';\nimport React, { useState } from 'react';\n\nimport type { Application } from '@spinnaker/core';\nimport { useDataSource } from '@spinnaker/core';\n\nimport type { SnapshotType } from './SnapshotsDataSource';\nimport { SnapshotsTable } from './SnapshotsTable';\n\ninterface SnapshotsProps {\n  app: Application;\n}\n\nexport function Snapshots(props: SnapshotsProps) {\n  const dataSource = props.app.getDataSource('snapshots');\n  const { data, status, loaded } = useDataSource<SnapshotType[]>(dataSource);\n  React.useEffect(() => {\n    dataSource.activate();\n  }, []);\n\n  const router = useRouter();\n  const { params, state } = useCurrentStateAndParams();\n  const [deployCommit, setDeployCommit] = useState('');\n  const [currentSort, setCurrentSort] = useState('Timestamp');\n\n  return (\n    <SnapshotsTable\n      commits={data}\n      toggleDeploy={setDeployCommit}\n      currentSort={currentSort}\n      toggleSort={setCurrentSort}\n    />\n  );\n}\n","import type { Application, IDataSourceConfig } from '@spinnaker/core';\nimport { REST } from '@spinnaker/core';\n\nexport interface SnapshotType {\n  sha: string;\n  message: string;\n  author: string;\n  timestamp: string;\n  branch: string;\n  currentlyDeployed?: string;\n}\n\nexport const SnapshotsDataSource: IDataSourceConfig<SnapshotType[]> = {\n  key: 'snapshots',\n  label: 'Snapshots',\n  autoActivate: true,\n  activeState: '**.snapshots.**',\n  visible: true,\n  sref: '.snapshots',\n  defaultData: [\n    {\n      author: 'test',\n      sha: 'test',\n      message: 'test',\n      timestamp: 'test',\n      branch: 'test',\n      currentlyDeployed: 'test',\n    },\n    {\n      author: 'test',\n      sha: 'test',\n      message: 'test',\n      timestamp: 'test',\n      branch: 'test',\n      currentlyDeployed: 'test',\n    },\n    {\n      author: 'test',\n      sha: 'test',\n      message: 'test',\n      timestamp: 'test',\n      branch: 'test',\n      currentlyDeployed: 'test',\n    },\n  ],\n  description: 'Snapshot View',\n  iconName: 'build',\n  loader: (application: Application) => SnapshotsReader.getBuilds(),\n  onLoad: (application: Application, data: any) => Promise.resolve(data),\n  lazy: true,\n};\n\nconst transformSnapshot = (build) => {\n  return;\n};\n\nexport class SnapshotsReader {\n  public static get MAX_LINES(): number {\n    return 4095;\n  }\n\n  public static getBuilds(): PromiseLike<SnapshotType[]> {\n    return REST('snapshots/builds')\n      .get()\n      .then((builds) => builds.map((build: any) => transformSnapshot(build)));\n  }\n}\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","window","spinnaker","require$$0","Button"],"mappings":"uFAOC,WAGA,IAAIA,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAID,OAAQ,CACf,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,SAGT,GAAgB,WAAZJ,EACV,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,SACrC,IAAK,IAAIG,KAAOV,EACXP,EAAOkB,KAAKX,EAAKU,IAAQV,EAAIU,IAChCd,EAAQM,KAAKQ,QAIfd,EAAQM,KAAKF,EAAIO,aAKpB,OAAOX,EAAQgB,KAAK,KAGgBC,EAAOC,SAC3CnB,EAAWoB,QAAUpB,EACrBkB,UAAiBlB,GAOjBqB,OAAOrB,WAAaA,CAEtB,CAlDA,2KCC+LsB,uLAC/L;;;;;;;;;;;;;;;;;0CCNEJ,UAAiBK,aCEeD,qICLlC,+SAQA,wTAyEA,CAC4BA,qFAhF5B,gRCGA,QAK4BA,+JF4BtBA,uEAEN,kLEPAE,uBACAA,gjBCfWF,qbAKAA,29BCTwBA,8IAKlBA,8DACWA,wFACcA,2DACFA,mLAOtB,qiBCgCPA"}